# Transfusion Dashboard Project Rules

This file captures key project intelligence, patterns, and preferences to guide development work on the Transfusion Dashboard project.

## Critical Implementation Paths

### CSV Data Loading

The application relies on a specific CSV data loading pattern:
- Use the `safeFetch()` utility from `utils.js` for all CSV file loading
- This utility handles case sensitivity issues by attempting multiple path variations
- Always handle fetch errors with appropriate user feedback
- CSV parsing is done with PapaParse library

### Visualization Implementation

When implementing or modifying visualizations:
- Chart configuration should follow established patterns in `visualization.js`
- Chart colors should use the design system variables
- Always include appropriate axes labels and legends
- Support both dark and light theme rendering
- Consider SVG export quality in all visualization work

### Module Extensions

When extending or modifying modules:
- Maintain clear separation of concerns between modules
- Follow the established patterns for data loading, transformation, and rendering
- Register new functionality with the dashboard controller
- Update UI in a consistent way with existing components

## Project-Specific Patterns

### File Naming

- JavaScript modules use camelCase naming (`descriptiveStats.js`)
- CSS uses hyphen-separated naming (`styles.css`)
- CSV data files follow specific patterns:
  - `VIZ_[PARAMETER]_[FACTOR].csv` for visualization data files
  - Descriptive names for statistic files (e.g., `patient_sex_distribution.csv`)

### Code Organization

- UI generation code is organized by functional module
- Data processing code is separated from rendering code
- Error handling is integrated at all levels
- Debug logging is available via the `logDebug()` utility

### Design System Usage

- Always use CSS variables for theming elements
- Follow typography scale for text elements
- Maintain consistent spacing using the spacing system
- Ensure components work in both dark and light themes

## Known Challenges

### CSV Loading

- Case sensitivity in file paths can cause issues
- The `safeFetch()` utility attempts to handle this with fallback options
- Always test CSV loading in the actual deployment environment

### Chart Rendering

- Chart configurations must balance aesthetics and data clarity
- Complex datasets may require performance optimization
- SVG export quality must be maintained for publication use

### Responsive Design

- Charts and visualization controls need special attention for smaller screens
- Test all UI components across the defined breakpoints
- Consider touch interfaces for interactive elements

## Development Workflow

### Local Testing

- Use the included Python server (`serve.py`) for local development
- This avoids CORS issues when loading CSV files
- Access the application at `http://localhost:8000` when using the server

### Debugging

- Enable debug mode via URL parameter: `?debug=true`
- Use the `logDebug()` utility for console logging in development
- Check browser console for detailed error information

### Feature Extension

- Begin by understanding the existing module structure
- Create new functionality following established patterns
- Test thoroughly with different datasets and screen sizes
- Ensure compatibility with the SVG export functionality

## Code Style Preferences

- ES6+ JavaScript features are preferred
- Clear function and variable naming is prioritized
- Functions should have single responsibilities
- CSS follows the established design system
- Comments explain "why" rather than "what"

---

*Note: This .clinerules file will be updated as new patterns and preferences are discovered through work on the project.*
