# Transfusion Dashboard Project Rules

This file captures key project intelligence, patterns, and preferences to guide development work on the Transfusion Dashboard project.

## Critical Implementation Paths

### CSV Data Loading

The application relies on a specific CSV data loading pattern:
- Use the `safeFetch()` utility from `utils.js` for all CSV file loading
- This utility handles case sensitivity issues by attempting multiple path variations
- Always handle fetch errors with appropriate user feedback
- CSV parsing is done with PapaParse library

### Visualization Implementation

When implementing or modifying visualizations:
- Chart configuration should follow established patterns in `visualization.js`
- Chart colors should use the design system variables
- Always include appropriate axes labels and legends
- Support both dark and light theme rendering using conditional styling
- Consider SVG export quality in all visualization work
- Implement theme-aware styling with `document.body.classList.contains('light-theme')` checks

### Dark Mode and Theme Toggle Implementation

When implementing UI elements that must support both dark and light modes:
- Use conditional styling to adjust based on current theme: 
  `document.body.classList.contains('light-theme') ? lightValue : darkValue`
- Always test both dark and light modes when implementing new features
- Verify component appearance by toggling between modes multiple times
- Never assume a component will look correct in both modes without testing

#### Chart Visualizations
- Increase line thickness in dark mode (3px) compared to light mode (2px)
- Increase grid line opacity in dark mode (15%) compared to light mode (5%)
- Brighten colors specifically for dark mode to ensure visibility
- Use higher opacity for fill areas in dark mode (25% vs 15%)
- Ensure text elements (labels, ticks, legends) have sufficient contrast
- Apply consistent font size increases for better readability (13px for axes)
- Follow these patterns in all chart types across the application

#### Tooltips and Overlays
- Use dark backgrounds with light text for tooltips in both modes
- Recommended tooltip background: 
  - Dark mode: `rgba(30, 30, 30, 0.95)`
  - Light mode: `rgba(45, 55, 72, 0.95)`
- Always use white text in tooltips regardless of theme: `rgba(255, 255, 255, 1.0)`
- Add visible borders to tooltips: `rgba(0, 0, 0, 0.2)` or `rgba(255, 255, 255, 0.2)`
- Use box-shadow for better definition: `0 4px 6px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.06)`
- Check tooltip implementations across all related modules - Chart.js config may be duplicated

#### Module Consistency
- Look for duplicate code that implements similar functionality across modules
- Chart.js configuration may appear in multiple files (e.g., visualization.js, transfusions.js)
- When fixing theme issues, check all instances of similar component configuration
- Consider refactoring common theme-dependent styling into shared functions

### Module Extensions

When extending or modifying modules:
- Maintain clear separation of concerns between modules
- Follow the established patterns for data loading, transformation, and rendering
- Register new functionality with the dashboard controller
- Update UI in a consistent way with existing components

### Component Factors Module

When working with the Component Factors module:
- Remember it serves dual purposes: powering both the dedicated tab AND Table 2b in Main Findings
- Modifications to visualization code affect both locations
- Always test both areas (Main Findings tab and Component Factors tab) after making changes
- Maintain the small multiples visualization pattern for consistency
- Follow the established patterns for representing statistical significance
- Preserve the visual consistency of the visualization grid layout

## Project-Specific Patterns

### File Naming

- JavaScript modules use camelCase naming (`descriptiveStats.js`)
- CSS uses hyphen-separated naming (`styles.css`)
- CSV data files follow specific patterns:
  - `VIZ_[PARAMETER]_[FACTOR].csv` for visualization data files
  - Descriptive names for statistic files (e.g., `patient_sex_distribution.csv`)

### Code Organization

- UI generation code is organized by functional module
- Data processing code is separated from rendering code
- Error handling is integrated at all levels
- Debug logging is available via the `logDebug()` utility
- Functions with the same purpose across modules must have consistent signatures and return values
- When a utility function (like `getParameterDetails`) appears in multiple modules:
  - Ensure identical return object structures across all implementations
  - Consider refactoring into a shared utility function to avoid inconsistencies
  - When fixing issues in one module, check for similar functions in other modules

### Design System Usage

- Always use CSS variables for theming elements
- Follow typography scale for text elements
- Maintain consistent spacing using the spacing system
- Ensure components work in both dark and light themes

## Known Challenges

### CSV Loading

- Case sensitivity in file paths can cause issues
- The `safeFetch()` utility attempts to handle this with fallback options
- Always test CSV loading in the actual deployment environment

### Chart Rendering

- Chart configurations must balance aesthetics and data clarity
- Complex datasets may require performance optimization
- SVG export quality must be maintained for publication use
- Dark mode requires specific attention to contrast and visibility
- Utilize conditional styling to ensure charts are equally readable in both themes
- Test all chart types in both dark and light mode after modifications

### Responsive Design

- Charts and visualization controls need special attention for smaller screens
- Test all UI components across the defined breakpoints
- Consider touch interfaces for interactive elements

## Development Workflow

### Local Testing

- Use the included Python server (`serve.py`) for local development
- This avoids CORS issues when loading CSV files
- Access the application at `http://localhost:8000` when using the server

### Debugging

- Enable debug mode via URL parameter: `?debug=true`
- Use the `logDebug()` utility for console logging in development
- Check browser console for detailed error information

### Feature Extension

- Begin by understanding the existing module structure
- Create new functionality following established patterns
- Test thoroughly with different datasets and screen sizes
- Ensure compatibility with the SVG export functionality

## Code Style Preferences

- ES6+ JavaScript features are preferred
- Clear function and variable naming is prioritized
- Functions should have single responsibilities
- CSS follows the established design system
- Comments explain "why" rather than "what"

---

*Note: This .clinerules file will be updated as new patterns and preferences are discovered through work on the project.*
